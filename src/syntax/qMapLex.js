// Generated from /home/gbenm/code/pumkat/qMap/antlr4/qMapLex.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u000e\u008d\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u00052\n\u0005",
    "\u0003\u0005\u0005\u00055\n\u0005\u0003\u0005\u0005\u00058\n\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006=\n\u0006\u0003\u0006\u0005",
    "\u0006@\n\u0006\u0003\u0006\u0005\u0006C\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007H\n\u0007\u0003\u0007\u0005\u0007K\n\u0007\u0003",
    "\u0007\u0005\u0007N\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n",
    "\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0007\u0011f\n\u0011\f\u0011\u000e",
    "\u0011i\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0007\u0011o\n\u0011\f\u0011\u000e\u0011r\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011v\n\u0011\u0003\u0012\u0006\u0012y\n\u0012\r\u0012",
    "\u000e\u0012z\u0003\u0012\u0003\u0012\u0007\u0012\u007f\n\u0012\f\u0012",
    "\u000e\u0012\u0082\u000b\u0012\u0003\u0012\u0005\u0012\u0085\n\u0012",
    "\u0003\u0013\u0006\u0013\u0088\n\u0013\r\u0013\u000e\u0013\u0089\u0003",
    "\u0013\u0003\u0013\u0003\u0080\u0002\u0014\u0003\u0002\u0005\u0002\u0007",
    "\u0002\t\u0002\u000b\u0002\r\u0002\u000f\u0003\u0011\u0004\u0013\u0005",
    "\u0015\u0006\u0017\u0007\u0019\b\u001b\t\u001d\n\u001f\u000b!\f#\r%",
    "\u000e\u0003\u0002\u0007\f\u0002$$))AA^^cdhhppttvvxx\u0003\u0002$$\u0003",
    "\u0002))\u0007\u0002&&2;C\\aac|\u0005\u0002\u000b\f\u000f\u000f\"\"",
    "\u0002\u0099\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002",
    "\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002",
    "\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002",
    "\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002",
    "\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002",
    "\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002",
    "\u0002\u0003\'\u0003\u0002\u0002\u0002\u0005)\u0003\u0002\u0002\u0002",
    "\u0007+\u0003\u0002\u0002\u0002\t7\u0003\u0002\u0002\u0002\u000bB\u0003",
    "\u0002\u0002\u0002\rM\u0003\u0002\u0002\u0002\u000fO\u0003\u0002\u0002",
    "\u0002\u0011Q\u0003\u0002\u0002\u0002\u0013S\u0003\u0002\u0002\u0002",
    "\u0015U\u0003\u0002\u0002\u0002\u0017W\u0003\u0002\u0002\u0002\u0019",
    "Y\u0003\u0002\u0002\u0002\u001b]\u0003\u0002\u0002\u0002\u001d_\u0003",
    "\u0002\u0002\u0002\u001fa\u0003\u0002\u0002\u0002!u\u0003\u0002\u0002",
    "\u0002#\u0084\u0003\u0002\u0002\u0002%\u0087\u0003\u0002\u0002\u0002",
    "\'(\u0007$\u0002\u0002(\u0004\u0003\u0002\u0002\u0002)*\u0007)\u0002",
    "\u0002*\u0006\u0003\u0002\u0002\u0002+,\u0007^\u0002\u0002,-\t\u0002",
    "\u0002\u0002-\b\u0003\u0002\u0002\u0002.8\n\u0003\u0002\u0002/8\u0005",
    "\u0007\u0004\u000202\u0007^\u0002\u000210\u0003\u0002\u0002\u000212",
    "\u0003\u0002\u0002\u000224\u0003\u0002\u0002\u000235\u0007\u000f\u0002",
    "\u000243\u0003\u0002\u0002\u000245\u0003\u0002\u0002\u000256\u0003\u0002",
    "\u0002\u000268\u0007\f\u0002\u00027.\u0003\u0002\u0002\u00027/\u0003",
    "\u0002\u0002\u000271\u0003\u0002\u0002\u00028\n\u0003\u0002\u0002\u0002",
    "9C\n\u0004\u0002\u0002:C\u0005\u0007\u0004\u0002;=\u0007^\u0002\u0002",
    "<;\u0003\u0002\u0002\u0002<=\u0003\u0002\u0002\u0002=?\u0003\u0002\u0002",
    "\u0002>@\u0007\u000f\u0002\u0002?>\u0003\u0002\u0002\u0002?@\u0003\u0002",
    "\u0002\u0002@A\u0003\u0002\u0002\u0002AC\u0007\f\u0002\u0002B9\u0003",
    "\u0002\u0002\u0002B:\u0003\u0002\u0002\u0002B<\u0003\u0002\u0002\u0002",
    "C\f\u0003\u0002\u0002\u0002DN\n\u0003\u0002\u0002EN\u0005\u0007\u0004",
    "\u0002FH\u0007^\u0002\u0002GF\u0003\u0002\u0002\u0002GH\u0003\u0002",
    "\u0002\u0002HJ\u0003\u0002\u0002\u0002IK\u0007\u000f\u0002\u0002JI\u0003",
    "\u0002\u0002\u0002JK\u0003\u0002\u0002\u0002KL\u0003\u0002\u0002\u0002",
    "LN\u0007\f\u0002\u0002MD\u0003\u0002\u0002\u0002ME\u0003\u0002\u0002",
    "\u0002MG\u0003\u0002\u0002\u0002N\u000e\u0003\u0002\u0002\u0002OP\u0007",
    "}\u0002\u0002P\u0010\u0003\u0002\u0002\u0002QR\u0007\u007f\u0002\u0002",
    "R\u0012\u0003\u0002\u0002\u0002ST\u0007#\u0002\u0002T\u0014\u0003\u0002",
    "\u0002\u0002UV\u0007<\u0002\u0002V\u0016\u0003\u0002\u0002\u0002WX\u0007",
    ".\u0002\u0002X\u0018\u0003\u0002\u0002\u0002YZ\u00070\u0002\u0002Z[",
    "\u00070\u0002\u0002[\\\u00070\u0002\u0002\\\u001a\u0003\u0002\u0002",
    "\u0002]^\u00070\u0002\u0002^\u001c\u0003\u0002\u0002\u0002_`\u0007*",
    "\u0002\u0002`\u001e\u0003\u0002\u0002\u0002ab\u0007+\u0002\u0002b \u0003",
    "\u0002\u0002\u0002cg\u0005\u0005\u0003\u0002df\u0005\u000b\u0006\u0002",
    "ed\u0003\u0002\u0002\u0002fi\u0003\u0002\u0002\u0002ge\u0003\u0002\u0002",
    "\u0002gh\u0003\u0002\u0002\u0002hj\u0003\u0002\u0002\u0002ig\u0003\u0002",
    "\u0002\u0002jk\u0005\u0005\u0003\u0002kv\u0003\u0002\u0002\u0002lp\u0005",
    "\u0003\u0002\u0002mo\u0005\t\u0005\u0002nm\u0003\u0002\u0002\u0002o",
    "r\u0003\u0002\u0002\u0002pn\u0003\u0002\u0002\u0002pq\u0003\u0002\u0002",
    "\u0002qs\u0003\u0002\u0002\u0002rp\u0003\u0002\u0002\u0002st\u0005\u0003",
    "\u0002\u0002tv\u0003\u0002\u0002\u0002uc\u0003\u0002\u0002\u0002ul\u0003",
    "\u0002\u0002\u0002v\"\u0003\u0002\u0002\u0002wy\t\u0005\u0002\u0002",
    "xw\u0003\u0002\u0002\u0002yz\u0003\u0002\u0002\u0002zx\u0003\u0002\u0002",
    "\u0002z{\u0003\u0002\u0002\u0002{\u0085\u0003\u0002\u0002\u0002|\u0080",
    "\u0007$\u0002\u0002}\u007f\u0005\r\u0007\u0002~}\u0003\u0002\u0002\u0002",
    "\u007f\u0082\u0003\u0002\u0002\u0002\u0080\u0081\u0003\u0002\u0002\u0002",
    "\u0080~\u0003\u0002\u0002\u0002\u0081\u0083\u0003\u0002\u0002\u0002",
    "\u0082\u0080\u0003\u0002\u0002\u0002\u0083\u0085\u0007$\u0002\u0002",
    "\u0084x\u0003\u0002\u0002\u0002\u0084|\u0003\u0002\u0002\u0002\u0085",
    "$\u0003\u0002\u0002\u0002\u0086\u0088\t\u0006\u0002\u0002\u0087\u0086",
    "\u0003\u0002\u0002\u0002\u0088\u0089\u0003\u0002\u0002\u0002\u0089\u0087",
    "\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002\u0002\u0002\u008a\u008b",
    "\u0003\u0002\u0002\u0002\u008b\u008c\b\u0013\u0002\u0002\u008c&\u0003",
    "\u0002\u0002\u0002\u0013\u0002147<?BGJMgpuz\u0080\u0084\u0089\u0003",
    "\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class qMapLex extends antlr4.Lexer {

    static grammarFileName = "qMapLex.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'{'", "'}'", "'!'", "':'", "','", "'...'", 
                         "'.'", "'('", "')'" ];
	static symbolicNames = [ null, "LEFT_BRACKET", "RIGHT_BRACKET", "EX_MARK", 
                          "COLON", "COMMA", "TRIPLE_DOT", "DOT", "LEFT_PAREN", 
                          "RIHT_PAREN", "STRING", "ID", "WS" ];
	static ruleNames = [ "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", "DLOUBE_QUOTE_STR_CHAR", 
                      "SINGLE_QUOTE_STR_CHAR", "SCHAR", "LEFT_BRACKET", 
                      "RIGHT_BRACKET", "EX_MARK", "COLON", "COMMA", "TRIPLE_DOT", 
                      "DOT", "LEFT_PAREN", "RIHT_PAREN", "STRING", "ID", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

qMapLex.EOF = antlr4.Token.EOF;
qMapLex.LEFT_BRACKET = 1;
qMapLex.RIGHT_BRACKET = 2;
qMapLex.EX_MARK = 3;
qMapLex.COLON = 4;
qMapLex.COMMA = 5;
qMapLex.TRIPLE_DOT = 6;
qMapLex.DOT = 7;
qMapLex.LEFT_PAREN = 8;
qMapLex.RIHT_PAREN = 9;
qMapLex.STRING = 10;
qMapLex.ID = 11;
qMapLex.WS = 12;



