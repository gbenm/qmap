// Generated from /home/gbenm/code/pumkat/qMap/antlr4/qMap.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u000ev\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u00050\n\u0005\u0003\u0005\u0005\u0005",
    "3\n\u0005\u0003\u0005\u0005\u00056\n\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006;\n\u0006\u0003\u0006\u0005\u0006>\n\u0006\u0003\u0006",
    "\u0005\u0006A\n\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0007\u0010Y\n\u0010\f\u0010\u000e\u0010",
    "\\\u000b\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010b\n\u0010\f\u0010\u000e\u0010e\u000b\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010i\n\u0010\u0003\u0011\u0006\u0011l\n\u0011\r\u0011\u000e",
    "\u0011m\u0003\u0012\u0006\u0012q\n\u0012\r\u0012\u000e\u0012r\u0003",
    "\u0012\u0003\u0012\u0004Zc\u0002\u0013\u0003\u0002\u0005\u0002\u0007",
    "\u0002\t\u0002\u000b\u0002\r\u0003\u000f\u0004\u0011\u0005\u0013\u0006",
    "\u0015\u0007\u0017\b\u0019\t\u001b\n\u001d\u000b\u001f\f!\r#\u000e\u0003",
    "\u0002\u0007\f\u0002$$))AA^^cdhhppttvvxx\u0003\u0002$$\u0003\u0002)",
    ")\u0007\u0002&&2;C\\aac|\u0005\u0002\u000b\f\u000f\u000f\"\"\u0002}",
    "\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002",
    "\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002",
    "\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002",
    "\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002",
    "\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002",
    "\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0003",
    "%\u0003\u0002\u0002\u0002\u0005\'\u0003\u0002\u0002\u0002\u0007)\u0003",
    "\u0002\u0002\u0002\t5\u0003\u0002\u0002\u0002\u000b@\u0003\u0002\u0002",
    "\u0002\rB\u0003\u0002\u0002\u0002\u000fD\u0003\u0002\u0002\u0002\u0011",
    "F\u0003\u0002\u0002\u0002\u0013H\u0003\u0002\u0002\u0002\u0015J\u0003",
    "\u0002\u0002\u0002\u0017L\u0003\u0002\u0002\u0002\u0019P\u0003\u0002",
    "\u0002\u0002\u001bR\u0003\u0002\u0002\u0002\u001dT\u0003\u0002\u0002",
    "\u0002\u001fh\u0003\u0002\u0002\u0002!k\u0003\u0002\u0002\u0002#p\u0003",
    "\u0002\u0002\u0002%&\u0007$\u0002\u0002&\u0004\u0003\u0002\u0002\u0002",
    "\'(\u0007)\u0002\u0002(\u0006\u0003\u0002\u0002\u0002)*\u0007^\u0002",
    "\u0002*+\t\u0002\u0002\u0002+\b\u0003\u0002\u0002\u0002,6\n\u0003\u0002",
    "\u0002-6\u0005\u0007\u0004\u0002.0\u0007^\u0002\u0002/.\u0003\u0002",
    "\u0002\u0002/0\u0003\u0002\u0002\u000202\u0003\u0002\u0002\u000213\u0007",
    "\u000f\u0002\u000221\u0003\u0002\u0002\u000223\u0003\u0002\u0002\u0002",
    "34\u0003\u0002\u0002\u000246\u0007\f\u0002\u00025,\u0003\u0002\u0002",
    "\u00025-\u0003\u0002\u0002\u00025/\u0003\u0002\u0002\u00026\n\u0003",
    "\u0002\u0002\u00027A\n\u0004\u0002\u00028A\u0005\u0007\u0004\u00029",
    ";\u0007^\u0002\u0002:9\u0003\u0002\u0002\u0002:;\u0003\u0002\u0002\u0002",
    ";=\u0003\u0002\u0002\u0002<>\u0007\u000f\u0002\u0002=<\u0003\u0002\u0002",
    "\u0002=>\u0003\u0002\u0002\u0002>?\u0003\u0002\u0002\u0002?A\u0007\f",
    "\u0002\u0002@7\u0003\u0002\u0002\u0002@8\u0003\u0002\u0002\u0002@:\u0003",
    "\u0002\u0002\u0002A\f\u0003\u0002\u0002\u0002BC\u0007}\u0002\u0002C",
    "\u000e\u0003\u0002\u0002\u0002DE\u0007\u007f\u0002\u0002E\u0010\u0003",
    "\u0002\u0002\u0002FG\u0007#\u0002\u0002G\u0012\u0003\u0002\u0002\u0002",
    "HI\u0007<\u0002\u0002I\u0014\u0003\u0002\u0002\u0002JK\u0007.\u0002",
    "\u0002K\u0016\u0003\u0002\u0002\u0002LM\u00070\u0002\u0002MN\u00070",
    "\u0002\u0002NO\u00070\u0002\u0002O\u0018\u0003\u0002\u0002\u0002PQ\u0007",
    "0\u0002\u0002Q\u001a\u0003\u0002\u0002\u0002RS\u0007*\u0002\u0002S\u001c",
    "\u0003\u0002\u0002\u0002TU\u0007+\u0002\u0002U\u001e\u0003\u0002\u0002",
    "\u0002VZ\u0005\u0005\u0003\u0002WY\u0005\u000b\u0006\u0002XW\u0003\u0002",
    "\u0002\u0002Y\\\u0003\u0002\u0002\u0002Z[\u0003\u0002\u0002\u0002ZX",
    "\u0003\u0002\u0002\u0002[]\u0003\u0002\u0002\u0002\\Z\u0003\u0002\u0002",
    "\u0002]^\u0005\u0005\u0003\u0002^i\u0003\u0002\u0002\u0002_c\u0005\u0003",
    "\u0002\u0002`b\u0005\t\u0005\u0002a`\u0003\u0002\u0002\u0002be\u0003",
    "\u0002\u0002\u0002cd\u0003\u0002\u0002\u0002ca\u0003\u0002\u0002\u0002",
    "df\u0003\u0002\u0002\u0002ec\u0003\u0002\u0002\u0002fg\u0005\u0003\u0002",
    "\u0002gi\u0003\u0002\u0002\u0002hV\u0003\u0002\u0002\u0002h_\u0003\u0002",
    "\u0002\u0002i \u0003\u0002\u0002\u0002jl\t\u0005\u0002\u0002kj\u0003",
    "\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002",
    "mn\u0003\u0002\u0002\u0002n\"\u0003\u0002\u0002\u0002oq\t\u0006\u0002",
    "\u0002po\u0003\u0002\u0002\u0002qr\u0003\u0002\u0002\u0002rp\u0003\u0002",
    "\u0002\u0002rs\u0003\u0002\u0002\u0002st\u0003\u0002\u0002\u0002tu\b",
    "\u0012\u0002\u0002u$\u0003\u0002\u0002\u0002\u000e\u0002/25:=@Zchmr",
    "\u0003\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class qMapLexer extends antlr4.Lexer {

    static grammarFileName = "qMap.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'{'", "'}'", "'!'", "':'", "','", "'...'", 
                         "'.'", "'('", "')'" ];
	static symbolicNames = [ null, "LEFT_BRACKET", "RIGHT_BRACKET", "EX_MARK", 
                          "COLON", "COMMA", "TRIPLE_DOT", "DOT", "LEFT_PAREN", 
                          "RIHT_PAREN", "STRING", "ID", "WS" ];
	static ruleNames = [ "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", "DLOUBE_QUOTE_STR_CHAR", 
                      "SINGLE_QUOTE_STR_CHAR", "LEFT_BRACKET", "RIGHT_BRACKET", 
                      "EX_MARK", "COLON", "COMMA", "TRIPLE_DOT", "DOT", 
                      "LEFT_PAREN", "RIHT_PAREN", "STRING", "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

qMapLexer.EOF = antlr4.Token.EOF;
qMapLexer.LEFT_BRACKET = 1;
qMapLexer.RIGHT_BRACKET = 2;
qMapLexer.EX_MARK = 3;
qMapLexer.COLON = 4;
qMapLexer.COMMA = 5;
qMapLexer.TRIPLE_DOT = 6;
qMapLexer.DOT = 7;
qMapLexer.LEFT_PAREN = 8;
qMapLexer.RIHT_PAREN = 9;
qMapLexer.STRING = 10;
qMapLexer.ID = 11;
qMapLexer.WS = 12;



